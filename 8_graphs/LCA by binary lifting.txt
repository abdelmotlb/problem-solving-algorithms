// LCA code.
const int MAX_DEPTH = 30;
const int N = 3e5;
vector<int> graph[N];
vector<bool> visited(N, false);
// binary lifting.
int ancestor[N][MAX_DEPTH];
vector<int> lvl(N);

// need base case.
void DFS(int currentNode){
    // visited.
    visited[currentNode] = 1;
    int half;
    for (int i = 1; i < MAX_DEPTH-1; ++i) {
        half = ancestor[currentNode][i-1];
        ancestor[currentNode][i] = ancestor[half][i-1];
    }

    // dfs
    for(auto child: graph[currentNode]){
        if(visited[child]) continue;
        // level update.
        lvl[child] = lvl[currentNode] + 1;
        // base case built here.
        ancestor[child][0] = currentNode;
        DFS(child);
    }
}

int kThLvlNode(int pivot, int k){
    int currentAns = pivot;
    for (int i = MAX_DEPTH - 1; i >= 0; --i) {
        if((1 << i) & k){
            currentAns = ancestor[currentAns][i];
        }
    }return currentAns;
}

int LCA(int u, int v){
    if(lvl[u] < lvl[v])swap(u, v);
    u = kThLvlNode(u, lvl[u] - lvl[v]);

    if(u == v)
        return u;

    for(int i = MAX_DEPTH - 1; i >= 0; i--){
        if(ancestor[u][i] == ancestor[v][i])
            continue;
        u = ancestor[u][i];
        v = ancestor[v][i];
    }

    return ancestor[u][0];
}